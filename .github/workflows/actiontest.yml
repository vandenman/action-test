name: Test

on: push

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    continue-on-error: true

    name: (${{ matrix.os }}) (${{ matrix.pkg }})

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        pkg: [pkgA, pkgB]

    # how do avoid hardcoding these?
    outputs:
      pkgA: ${{ steps.update-output.outputs.ubuntu-latest-pkgA }}
      pkgB: ${{ steps.update-output.outputs.ubuntu-latest-pkgB }}
  
    steps:
      - uses: actions/checkout@v2
      
      # more stuff that actually runs unit tests
      - name: fake unit tests
        run: |
          if [ ${{ matrix.pkg }} = 'pkgA' ]; then
            exit 1
          fi
        shell: bash

      - name: set error if tests fail
        id: update-output
        if: ${{ failure() }}
        run: echo "::set-output name=${{ matrix.os }}-${{ matrix.pkg }}::error"
        shell: bash

  aggregate-results:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Aggregate results
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: echo "$NEEDS"
