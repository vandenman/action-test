name: Test

on: push

jobs:
  create-matrix:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: create modules
        id: set-modules
        run: echo "::set-output name=modules::['pkgA','pkgA']"

    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}

  unit-tests:
    needs: create-matrix
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    name: ${{ matrix.os }} (${{ matrix.module }})

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        module: ${{ fromJson(needs.create-matrix.outputs.modules) }}

    # how to avoid hardcoding these?
    outputs:
      ubuntu-latest-pkgA: ${{ steps.update-output.outputs.ubuntu-latest-pkgA }}
      ubuntu-latest-pkgB: ${{ steps.update-output.outputs.ubuntu-latest-pkgB }}     
  
    steps:
      - uses: actions/checkout@v2
      
      - name: fake unit tests
        run: |
          exit 1 # fail all tests for now
          # fail only pkgA
          #if [ ${{ matrix.module }} = 'pkgA' ]; then
          #  exit 1
          #fi
        shell: bash

      - name: set error if tests fail
        id: update-output
        if: ${{ failure() }}
        run: echo "::set-output name=${{ matrix.os }}-${{ matrix.module }}::error"
        shell: bash

  aggregate-results:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Aggregate results
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: echo "$NEEDS"
